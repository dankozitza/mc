//
// vectors.cpp
//
// Created by Daniel Kozitza
//

#include "../tools.hpp"

namespace tools {

   template <typename E>
   size_t bin(const E& elem, size_t digit)
   {
       return elem.size() > digit ? size_t(elem[digit]) + 1 : 0;
   }

   template <size_t R, typename C, typename P>
   void radix_sort(P& pos, const C& data, size_t digit)
   {
       using A = array<size_t, R + 1>;
       A count = {};
       P prev(pos);

       for (auto i : prev)
           ++count[bin(data[i], digit)];

       A done = {}, offset = {{0}};
       partial_sum(count.begin(), count.end() - 1, offset.begin() + 1);

       for (auto i : prev)
       {
           size_t b = bin(data[i], digit);
           pos[offset[b] + done[b]++] = i;
       }
   }

   struct shorter
   {
       template <typename A>
       bool operator()(const A& a, const A& b) { return a.size() < b.size(); }
   };

   template <size_t R, typename C>
   vector<size_t> radix_sort(const C& data)
   {
       vector<size_t> pos(data.size());
       iota(pos.begin(), pos.end(), 0);

       size_t width = max_element(data.begin(), data.end(), 
   shorter())->size();

       for (long digit = long(width) - 1; digit >= 0; --digit)
           radix_sort<R>(pos, data, size_t(digit));

       return pos;
   }
}
